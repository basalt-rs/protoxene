"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: basalt.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthClientImpl = exports.AuthServiceName = exports.LoginResponse = exports.LoginRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "basalt";
function createBaseLoginRequest() {
    return { name: "", password: "" };
}
exports.LoginRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoginRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        return obj;
    },
    create(base) {
        return exports.LoginRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLoginRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.password = (_b = object.password) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseLoginResponse() {
    return { sessionToken: "" };
}
exports.LoginResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sessionToken !== "") {
            writer.uint32(10).string(message.sessionToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoginResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionToken !== "") {
            obj.sessionToken = message.sessionToken;
        }
        return obj;
    },
    create(base) {
        return exports.LoginResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLoginResponse();
        message.sessionToken = (_a = object.sessionToken) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.AuthServiceName = "basalt.Auth";
class AuthClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.AuthServiceName;
        this.rpc = rpc;
        this.login = this.login.bind(this);
    }
    login(request) {
        const data = exports.LoginRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "login", data);
        return promise.then((data) => exports.LoginResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.AuthClientImpl = AuthClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=basalt.js.map